@startuml
'https://plantuml.com/class-diagram

package controller{

    class AdminController{
        +adminController(EmpleadoService,AreasMercadoService,EmpresaService)
        +recuperarAdmin(HttpSession,Model)
        +listarAdmin(HttpSession,Model) : String
        +formularioAdmin(HttpSession,Model) : String
        +agregarAdmin(Administrador) : String
        +actualizarAdmin(Integer,HttpSession,Model) : String
        +eliminar(Integer) : String
        +usuarios(HttpSession,Model) : String
        +habilitarUsuario(Integer,HttpSession,Model) : String
        +habilitarCredencial(String, String) : String
        +eliminarCredencial(String) : String
    }

    class AreasMercadoController{
        +areasMercadoController(AreasMercadoService,EmpleadoService)
        +recuperarAdmin(HttpSession, Model)
        +listarAreas(HttpSession, Model) : String
        +mostrarFormulario(HttpSession, Model) : String
        +agregar(AreasMercado) : String
        +actualizar(Integer,HttpSession, Model) : String
        +eliminar(Integer) : String
    }

    class AsesorController{
        +asesorController(EmpleadoService,AreasMercadoService,EmpresaService)
        +recuperarAdmin(HttpSession, Model)
        +cargarDatosFormulario(Asesor,Model)
        +listarAses(HttpSession, Model) : String
        +formularioAses(HttpSession, Model) : String
        +agregarAses(Asesor) : String
        +actualizarAses(Integer, HttpSession, Model) : String
        +eliminarAsesor(Integer) : String
        +eliminarAreaAsesorada(Integer,Integer,Model) : String
        +agregarAreaAsesorada(Integer,Integer,Date,Model) : String
        +agregarEmpresaAsesorada(Integer,Integer,Date,Model) : String
        +eliminarEmpresaAsesorada(Integer,Integer,Model) : String
    }

    class ControllerUbicaciones {
        +controllerUbicaciones(EmpleadoService, EmpresaService, UbicacionesService)
        +recuperarAdmin(HttpSession,Model)
        +listarCiudades(HttpSession,Model) : String
        +listarPaises(HttpSession,Model) : String
        +mostrarFormularioCiudad(HttpSession,Model) : String
        +mostrarFormularioPais(HttpSession,Model) : String
        +actualizar(Integer,HttpSession,Model) : String
        +actualizarPais(Integer,HttpSession,Model) : String
        +agregarCiudad(Integer,Ciudad) : String
        +agregarPais(Integer,Pais) : String
        +eliminarPais(Integer) : String
        +eliminarCiudad(Integer) : String

    }

    class EmpleadoController {
        +empleadoController(EmpleadoService,EmpresaService)
        +administrador(Model,HttpSession) : String
        +vendedor(Model,HttpSession) : String
        +asesor(Model,HttpSession) : String
        +recuperarAdmin(HttpSession,Model)
        +cambiarPass(HttpSession,Model)
        +cambiarPass(String,HttpSession)
        +cancelaProceso(HttpSession)
    }

    class EmpresaController {
        +empresaController(EmpresaService,UbicacionesService,EmpleadoService,AreasMercadoService)
        +recuperarAdmin(HttpSession,Model)
        +listarAreas(HttpSession,Model) : String
        +mostrarFormulario(HttpSession,Model) : String
        +agregar(Integer,Empresa) : String
        +actualizar(Integer,HttpSession,Model) : String
        +eliminar(Integer) : String
        +vendedoresEmpresa(Integer,HttpSession,Model) : String
        +asesoresEmpresa(Integer,HttpSession,Model) : String
        +cubrirArea(Integer,Integer) : String
        +quitarArea(Integer,Integer) : String
    }

    class LogInController {
        +logInController(EmpleadoService)
        +redirectLogin() : String
        +login() : String
        +redirect(String,HttpSession) : String
    }

    class VendedorController {
        +vendedorController(EmpleadoService,AreasMercadoService,EmpresaService)
        +recuperarAdmin(HttpSession,Model)
        +cargarDatosFormulario(Vendedor,Model) : String
        +listarVendedores(HttpSession,Model) : String
        +formularioVendedor(HttpSession,Model) : String
        +agregar(Vendedor) : String
        +actualizar(Integer,HttpSession,Model) : String
        +eliminar(Integer) : String
        +listarEmpresas(Integer,HttpSession,Model) : String
        +agregarEmpresa(Integer,Integer) : String
        +captarVendedor(Integer,Integer,Date,Model) : String
        +desvincularVendedorCaptado(Integer,Model) : String
    }
}

package service {

    class AreasMercadoService{
        +AreasMercadoService(AreasMercadoDAOInterface)
        +getById(Integer) : AreasMercado
        +getAll() : AreasMercado[]
        +getAsesoresPorArea(Integer) : Empleado[]
        +save(AreasMercado)
        +update(AreasMercado)
        +delete(Integer)
    }

    class EmpleadoService{
        +EmpleadoService(EmpleadosDAOInterface,EmpresaDAOInterface,AreasMercadoDAOInterface)
        +getById(Integer) : Empleado[]
        +getAll() : Empleado[]
        +getAllCredenciales() : Empleado[]
        +getAdministradores() : Administrador[]
        +getAsesores() : Asesor[]
        +getEmpleadosPorEmpresa(Integer) : Empleado[]
        +getEmpresasAsesoradas(Integer) : AsesorEmpresa[]
        +getEmpresaVendedor(Integer) : Empresa
        +getAreasAsesoradasPorAsesor(Integer) : AreasMercado
        +getVendedores() : Vendedor[]
        +getFechaAsesorEmpresa(Integer, Integer) : Date
        +getVendedoresCaptados(Integer) : VendedorCaptado[]
        +getVendedorCaptado(Integer,Integer) : VendedorCaptado
        +getCaptadorDelVendedor(Integer) : Vendedor
        +getFechaCaptado(Integer,Integer) : Date
        +agregarVendedorCaptado(Integer, Integer, Date)
        +eliminarVendedorCaptado(Integer, Integer)
        +save(Empleado emp)
        +save(VendedorCaptado)
        +update(Empleado)
        +delete(Integer)
        +savePass(Credencial)
        +updatePass(Credencial)
        +deletePass(Credencial)
        +getCredencial(Empleado) : Credencial
        +getPass(Empleado usuario) : String
        +getRol(Empleado usuario) : String
        +eliminarTodosLosVendedoresCaptados(Integer)
        +vendedorEsCaptable(Integer,Integer) : Boolean
        -vendedorCaptableIteracion(Integer,Integer) : Boolean
    }

    class EmpresaService{
        +EmpresaService(EmpresaDAOInterface,EmpleadosDAOInterface,AreasMercadoDAOInterface,UbicacionesServiceInterface)
        +AreasMercadoDAO(EntityManager)
        +getById(Integer) : AreasMercado
        +getAll() : AreasMercado[]
        +getAsesoresPorArea(Integer) : Empleado[]
        +save(AreasMercado)
        +update(AreasMercado)
        +delete(Integer)
    }

    class UbicacionesService {
        +UbicacionesService(UbicacionesDAOInterface)
        +save(Pais)
        +save(Ciudad)
        +getPaisById(Integer) : Pais
        +getCiudadById(Integer) : Ciudad
        +getAllPaises() : Pais[]
        +getAllCiudades() : Ciudad[]
        +updatePais(Pais)
        +updateCiudad(Ciudad)
        +deleteCiudad(Integer)
        +deletePais(Integer)
    }

    interface UbicacionesServiceInterface <<Interface>> {
        +save(Pais)
        +save(Ciudad)
        +getPaisById(Integer) : Pais
        +getCiudadById(Integer) : Ciudad
        +getAllPaises() : Pais[]
        +getAllCiudades() : Ciudad[]
        +updatePais(Pais)
        +updateCiudad(Ciudad)
        +deleteCiudad(Integer)
        +deletePais(Integer)
    }

    interface EmpresaServiceInterface <<Interface>> {
        +getById(Integer) : Empresa;
        +getEmpresaByVendedorId(Integer) : Empresa
        +getAll() : Empresa[]
        +getAreasMercadoPorEmpresa(Integer) : AreasMercado
        +getVendedoresPorEmpresa(Integer) : Vendedor[]
        +getCiudadesPorEmpresa(Integer) : Ciudad[]
        +getAsesoresPorEmpresa(Empresa) : Asesor
        +getAsesoresPorEmpresaConFechaInicio(Empresa) : AsesorEmpresa[]
        +save(Empresa)
        +save(AsesorEmpresa)
        +update(Empresa)
        +delete(Integer)
        +desbloquear(Integer)
        delete(AsesorEmpresa)
    }

    interface AreasMercadoServiceInterface <<Interface>> {
        +AreasMercadoDAO(EntityManager)
        +getById(Integer) : AreasMercado
        +getAll() : AreasMercado[]
        +getAsesoresPorArea(Integer) : Empleado[]
        +save(AreasMercado)
        +update(AreasMercado)
        +delete(Integer)
    }

    interface EmpleadoServiceInterface <<Interface>> {
        +getById(Integer) : Empleado[]
        +getAll() : Empleado[]
        +etAllCredenciales() : Empleado[]
        +getAdministradores() : Administrador[]
        +getAsesores() : Asesor[]
        +getEmpleadosPorEmpresa(Integer) : Empleado[]
        +getEmpresasAsesoradas(Integer) : AsesorEmpresa[]
        +getEmpresaVendedor(Integer) : Empresa
        +getAreasAsesoradasPorAsesor(Integer) : AreasMercado
        +getVendedores() : Vendedor[]
        +getFechaAsesorEmpresa(Integer, Integer) : Date
        +getVendedoresCaptados(Integer) : VendedorCaptado[]
        +getVendedorCaptado(Integer,Integer) : VendedorCaptado
        +getCaptadorDelVendedor(Integer) : Vendedor
        +getFechaCaptado(Integer,Integer) : Date
        +agregarVendedorCaptado(Integer, Integer, Date)
        +eliminarVendedorCaptado(Integer, Integer)
        +save(Empleado emp)
        +save(VendedorCaptado)
        +update(Empleado)
        +delete(Integer)
        +savePass(Credencial)
        +updatePass(Credencial)
        +deletePass(Credencial)
        +getCredencial(Empleado) : Credencial
        +getPass(Empleado usuario) : String
        +getRol(Empleado usuario) : String
        +eliminarTodosLosVendedoresCaptados(Integer)
    }

}

package dao {

    class AreasMercadoDAO{
        +AreasMercadoDAO(EntityManager)
        +getById(Integer) : AreasMercado
        +getAll() : AreasMercado[]
        +getAsesoresPorArea(Integer) : Empleado[]
        +save(AreasMercado)
        +update(AreasMercado)
        +delete(Integer)
    }

    class EmpleadosDAO{
        +EmpleadosDAO(EntityManager)
        +getById(Integer) : Empleado[]
        +getAll() : Empleado[]
        +getAllCredenciales() : Empleado[]
        +getAdministradores() : Administrador[]
        +getAsesores() : Asesor[]
        +getEmpleadosPorEmpresa(Integer) : Empleado[]
        +getEmpresasAsesoradas(Integer) : AsesorEmpresa[]
        +getEmpresaVendedor(Integer) : Empresa
        +getAreasAsesoradasPorAsesor(Integer) : AreasMercado
        +getVendedores() : Vendedor[]
        +getFechaAsesorEmpresa(Integer, Integer) : Date
        +getVendedoresCaptados(Integer) : VendedorCaptado[]
        +getVendedorCaptado(Integer,Integer) : VendedorCaptado
        +getCaptadorDelVendedor(Integer) : Vendedor
        +getFechaCaptado(Integer,Integer) : Date
        +agregarVendedorCaptado(Integer, Integer, Date)
        +eliminarVendedorCaptado(Integer, Integer)
        +save(Empleado emp)
        +save(VendedorCaptado)
        +update(Empleado)
        +delete(Integer)
        +savePass(Credencial)
        +updatePass(Credencial)
        +deletePass(Credencial)
        +getCredencial(Empleado) : Credencial
        +getPass(Empleado usuario) : String
        +getRol(Empleado usuario) : String
        +eliminarTodosLosVendedoresCaptados(Integer)
    }

    class EmpresaDAO{
        +EmpresaDAO(EntityManager)
        +AreasMercadoDAO(EntityManager)
        +getById(Integer) : AreasMercado
        +getAll() : AreasMercado[]
        +getAsesoresPorArea(Integer) : Empleado[]
        +save(AreasMercado)
        +update(AreasMercado)
        +delete(Integer)
    }

    class UbicacionesDAO {
        +UbicacionesDAO(EntityManager)
        +save(Pais)
        +save(Ciudad)
        +getPaisById(Integer) : Pais
        +getCiudadById(Integer) : Ciudad
        +getAllPaises() : Pais[]
        +getAllCiudades() : Ciudad[]
        +updatePais(Pais)
        +updateCiudad(Ciudad)
        +deleteCiudad(Integer)
        +deletePais(Integer)
    }

    interface UbicacionesDAOInterface <<Interface>> {
        +save(Pais)
        +save(Ciudad)
        +getPaisById(Integer) : Pais
        +getCiudadById(Integer) : Ciudad
        +getAllPaises() : Pais[]
        +getAllCiudades() : Ciudad[]
        +updatePais(Pais)
        +updateCiudad(Ciudad)
        +deleteCiudad(Integer)
        +deletePais(Integer)
    }

    interface EmpresaDAOInterface <<Interface>> {
        +getById(Integer) : Empresa;
        +getEmpresaByVendedorId(Integer) : Empresa
        +getAll() : Empresa[]
        +getAreasMercadoPorEmpresa(Integer) : AreasMercado
        +getVendedoresPorEmpresa(Integer) : Vendedor[]
        +getCiudadesPorEmpresa(Integer) : Ciudad[]
        +getAsesoresPorEmpresa(Empresa) : Asesor
        +getAsesoresPorEmpresaConFechaInicio(Empresa) : AsesorEmpresa[]
        +save(Empresa)
        +save(AsesorEmpresa)
        +update(Empresa)
        +delete(Integer)
        +desbloquear(Integer)
        delete(AsesorEmpresa)
    }

    interface AreasMercadoDAOInterface <<Interface>> {
        +AreasMercadoDAO(EntityManager)
        +getById(Integer) : AreasMercado
        +getAll() : AreasMercado[]
        +getAsesoresPorArea(Integer) : Empleado[]
        +save(AreasMercado)
        +update(AreasMercado)
        +delete(Integer)
    }

    interface EmpleadosDAOInterface <<Interface>> {
        +getById(Integer) : Empleado[]
        +getAll() : Empleado[]
        +etAllCredenciales() : Empleado[]
        +getAdministradores() : Administrador[]
        +getAsesores() : Asesor[]
        +getEmpleadosPorEmpresa(Integer) : Empleado[]
        +getEmpresasAsesoradas(Integer) : AsesorEmpresa[]
        +getEmpresaVendedor(Integer) : Empresa
        +getAreasAsesoradasPorAsesor(Integer) : AreasMercado
        +getVendedores() : Vendedor[]
        +getFechaAsesorEmpresa(Integer, Integer) : Date
        +getVendedoresCaptados(Integer) : VendedorCaptado[]
        +getVendedorCaptado(Integer,Integer) : VendedorCaptado
        +getCaptadorDelVendedor(Integer) : Vendedor
        +getFechaCaptado(Integer,Integer) : Date
        +agregarVendedorCaptado(Integer, Integer, Date)
        +eliminarVendedorCaptado(Integer, Integer)
        +save(Empleado emp)
        +save(VendedorCaptado)
        +update(Empleado)
        +delete(Integer)
        +savePass(Credencial)
        +updatePass(Credencial)
        +deletePass(Credencial)
        +getCredencial(Empleado) : Credencial
        +getPass(Empleado usuario) : String
        +getRol(Empleado usuario) : String
        +eliminarTodosLosVendedoresCaptados(Integer)
    }

    interface EntityManager
}
package entity{

    Interface CapazDeDespacharVista{
        - despacharVista() : String
    }

    class AreasMercado{
        - id : Integer
        - nombre : String
        - descripcion : String
        - eliminado : Integer
        - empresas : Set<Empresa>
        - asesores : Set<Asesores>
        + getId() : Integer
        + setId(Integer) : void
        + getNombre() : String
        + setNombre(String) : void
        + getDescripcion() : String
        + setDescripcion(String) : void
        + setEliminado(Integer) : void
        + getEliminado() : Integer
        + getEmpresas() : Set<Empresa>
        + setEmpresas(Set<Empresa>) : void
        + getAsesores() : Set<Asesor>
        + setAsesores(Set<Asesor> : void
        + toString() : String

    }
    class Pais{
            - id : Integer
            - nombre : String
            - eliminado : Integer
            - pbi : Double
            - habitantes : Integer
            - capital : Ciudad
            - ciudad : Set<Ciudad>
            + getId() : Integer
            + setId(Integer) : void
            + getNombre() : String
            + setNombre(String) : void
            + getEliminado() : Integer
            + setEliminado(Integer) : void
            + getCiudad() : Set<Ciudad>
            + setCiudad(Set<Ciudad>) : void
            + toString() : String
            + getHabitantes() : Integer
            + setHabitantes(Integer) : void
            + getFacturacion() : Double
            + setFacturacion(Double) : void
            + getCapital() : Ciudad
            + setCiudad(Ciudad) : void
        }

    class Ciudad{
        - id : Integer
        - nombre : String
        - eliminado : Integer
        - pais_ciudad : Pais
        - empresas : Set<Empresa>
        + getId() : Integer
        + setId(Integer) : void
        + getNombre() : String
        + setNombre(String) : void
        + getEliminado() : Integer
        + setEliminado(Integer) : void
        + getEmpresas() : Set<Empresa>
        + setEmpresa(Set<Empresa>) : void
        + toString() : String
        + getPais() : Pais
        + setPais(Pais) : void
    }
    abstract Empleado{
                -id : Integer
                -nombre : String
                -apellido : String
                -eliminado : Integer
                + getId() : Integer
                + setId(Integer) : void
                + getNombre(String) : String
                + setNombre(String) : void
                + getApellido() : String
                + setApellido(String) : void
                + getEliminado() : Integer
                + setEliminado(Integer) : void
                + toString() : String

            }

    class Administrador extends Empleado{
                + despacharVista() : String
            }

    class Asesor extends Empleado{
                    - titulacion : String
                    - direccion : String
                    - empresasAsesoradas : Set<EmpresasAsesoradas>
                    - areasAsesoradas : Set<AreasAsesoradas>
                    + getTitulacion() : String
                    + setTitulacion(String) : void
                    + getAreasAsesoradas() : Set<AreasAsesoradas>
                    + setAreasAsesoradas(Set<AreasAsesoradas>) : void
                    + getEmpresasAsesoradas() : Set<EmpresasAsesoradas>
                    + setEmpresasAsesoradas(Set<EmpresasAsesoradas>) : void
                    + despacharVista() : String
                }

    class VendedorCaptadoId{
                        - idVendedor : Integer
                        - idVendedorCaptado : Integer
                        - vendedorCaptado : Vendedor
                        + getIdVendedorCaptado() : Integer
                        + setIdVendedorCaptado(Integer) : void
                        + getVendedorCaptado() : Integer
                        + setVendedorCaptado(Integer) : void

            }


    class VendedorCaptado{
                    - id : VendedorCaptadoId
                    - vendedorPadre : Vendedor
                    - vendedorCaptado : Vendedor
                    - fechaCaptado : LocalDate
                    + setId(VendedorCaptadoId) : void
                    + getid() : VendedorCaptadoId
                    + getFechaCaptado() : LocalDate
                    + setFechaCaptado(Vendedor) : void
                    + getVendedorPadre() : Vendedor
                    +  setVendedorPadre(Vendedor) : void

                }



    class Vendedor extends Empleado{
                - direccion : String
                - empresa : Empresa
                - vendedorcaptado : vendedor
                + despacharVista() : String
                + getDireccion() : String
                + setDireccion(String) : void
                + getVendedoresCaptados() : Set<VendedorCaptado>
                + setVendedoresCaptados(Set<VendedorCaptado>) : void
                + getEmpresa() : empresa;
                + setEmpresa(Empresa) : void
                + tieneEmpresaAsignada() : boolean
                + eliminarVendedoresCaptados() : void
            }

    class Empresa{
                    - id : Integer
                    - nombre : String
                    - inicio : LocalDate
                    - sede : Ciudad
                    - facturacion : Decimal
                    -eliminado : Integer

                    + getId() : Integer
                    + setId(Integer) : void
                    + getNombre(String) : String
                    + setNombre(String) : void
                    + getSede() : Ciudad
                    + setSede(Ciudad) : void
                    + getFacturacion() : String
                    + setFacturacion(Decimal) : void
                    + getEliminado() : Integer
                    + setEliminado(Integer) : void
                    + toString() : String

                }

}

package security {

    class UserDetailsService {
        +userDetailsService(EmpleadoServiceInterface)
        +loadUserByUsername(String)
    }

    class WebSecurityConfig {
        +webSecurityConfig(UserDetailsService)
        +securityFilterChain(HttpSession) : SecurityFilterChain
        +addResourceHandlers(ResourceHandlerRegistry)
    }

}

UserDetailsService <--o UserDetailsService
WebSecurityConfig <--o WebMvcConfigurer

EntityManager <--o AreasMercadoDAO
EntityManager <--o EmpleadosDAO
EntityManager <--o EmpresaDAO
EntityManager <--o UbicacionesDAO

AreasMercadoDAO ...|> AreasMercadoDAOInterface
EmpleadosDAO ...|> EmpleadosDAOInterface
EmpresaDAO ...|> EmpresaDAOInterface
UbicacionesDAO ...|> UbicacionesDAOInterface

AreasMercadoService ..|> AreasMercadoServiceInterface
EmpleadoService ..|> EmpleadoServiceInterface
EmpresaService ..|> EmpresaServiceInterface
UbicacionesService ..|> UbicacionesServiceInterface

AreasMercadoService o---> AreasMercadoDAOInterface

EmpleadoService o----> EmpleadosDAOInterface
EmpleadoService o----> EmpresaDAOInterface
EmpleadoService o----> AreasMercadoDAOInterface

EmpresaDAOInterface <----o EmpresaService
EmpleadosDAOInterface <----o EmpresaService
AreasMercadoDAOInterface <----o EmpresaService
UbicacionesDAOInterface <----o EmpresaService

UbicacionesService o----> UbicacionesDAOInterface

AdminController o----> EmpleadoService
AdminController o----> AreasMercadoService
AdminController o----> EmpresaService

AreasMercadoController o----> AreasMercadoService
AreasMercadoController o----> EmpleadoService

AsesorController o----> EmpleadoService
AsesorController o----> AreasMercadoService
AsesorController o----> EmpresaService

ControllerUbicaciones o----> EmpleadoService
ControllerUbicaciones o----> UbicacionesService
ControllerUbicaciones o----> AreasMercadoService

EmpresaController o----> EmpresaService
EmpresaController o----> UbicacionesService
EmpresaController o----> EmpleadoService
EmpresaController o----> AreasMercadoService

LogInController o----> EmpleadoService

VendedorController o----> EmpleadoService
VendedorController o----> AreasMercadoService
VendedorController o----> EmpresaService



@enduml